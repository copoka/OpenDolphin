/*
 * SelectFileBean.java
 *
 * Created on 2001/12/02, 21:10
 */

package jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans;

import javax.swing.*;
import java.beans.*;
import java.io.*;
/**
 *
 * @author  Junzo SATO
 */
public class SelectFileBean extends javax.swing.JPanel {

    /** Creates new form SelectFileBean */
    public SelectFileBean() {
        initComponents();
        
        path = "";
        title = lblTitle.getText();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        tfPath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));
        
        setMinimumSize(new java.awt.Dimension(600, 40));
        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 40));
        jPanel1.setMinimumSize(new java.awt.Dimension(600, 40));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 40));
        lblTitle.setText("File: ");
        jPanel1.add(lblTitle);
        
        tfPath.setPreferredSize(new java.awt.Dimension(512, 21));
        jPanel1.add(tfPath);
        
        jButton1.setText("Choose...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jPanel1.add(jButton1);
        
        add(jPanel1);
        
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        JFileChooser chooser = new JFileChooser("/");
        if (chooser == null) return;
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int selected = chooser.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            // selected
            File file = chooser.getSelectedFile();
            try {
                setPath(file.getPath());
            } catch (PropertyVetoException ve) {
                
            }
            tfPath.setText(getPath());
            return;
        } else if (selected == JFileChooser.CANCEL_OPTION) {
            // canceled
            return;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /** Add a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    

    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }    

    /** Add a VetoableChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.addVetoableChangeListener(l);
    }
    
    /** Removes a VetoableChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.removeVetoableChangeListener(l);
    }
    
    /** Getter for property path.
     * @return Value of property path.
     */
    public String getPath() {
        return path;
    }
    
    /** Setter for property path.
     * @param path New value of property path.
     *
     * @throws PropertyVetoException
     */
    public void setPath(String path) throws java.beans.PropertyVetoException {
        String oldPath = this.path;
        vetoableChangeSupport.fireVetoableChange("path", oldPath, path);
        this.path = path;
        propertyChangeSupport.firePropertyChange("path", oldPath, path);
        
        // update GUI
        tfPath.setText(this.path);
    }
    
    /** Getter for property title.
     * @return Value of property title.
     */
    public String getTitle() {
        return title;
    }
    
    /** Setter for property title.
     * @param title New value of property title.
     *
     * @throws PropertyVetoException
     */
    public void setTitle(String title) throws java.beans.PropertyVetoException {
        String oldTitle = this.title;
        vetoableChangeSupport.fireVetoableChange("title", oldTitle, title);
        this.title = title;
        propertyChangeSupport.firePropertyChange("title", oldTitle, title);
        
        // update GUI
        lblTitle.setText(this.title);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField tfPath;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property path. */
    private String path;    

    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
    /** Utility field used by constrained properties. */
    private java.beans.VetoableChangeSupport vetoableChangeSupport =  new java.beans.VetoableChangeSupport(this);
    
    /** Holds value of property title. */
    private String title;
    
}
