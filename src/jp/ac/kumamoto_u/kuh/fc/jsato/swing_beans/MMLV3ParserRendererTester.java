/*
 * MMLParserRendererTester.java
 *
 * Created on 2002/03/30, 17:59
 */

package jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans;

import javax.xml.parsers.* ;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.*;

import jp.ac.kumamoto_u.kuh.fc.jsato.math_mml_three.*;
import java.io.*;
import java.util.*;

import jp.ac.kumamoto_u.kuh.fc.jsato.*;

/**
 *
 * @author  Junzo SATO
 */
public class MMLV3ParserRendererTester extends javax.swing.JFrame {
    
    MMLDirector dr = null;
    
    /** Creates new form MMLParserRendererTester */
    public MMLV3ParserRendererTester() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        selectFileBean1 = new jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.SelectFileBean();
        jPanel1 = new javax.swing.JPanel();
        statusBean1 = new jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.StatusBean();
        statusBean2 = new jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.StatusBean();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        chkValidating = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.X_AXIS));

        selectFileBean1.setMinimumSize(new java.awt.Dimension(800, 40));
        try {
            selectFileBean1.setTitle("V3 File: ");
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        jPanel3.add(selectFileBean1);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 600));
        jPanel1.add(statusBean1);

        jPanel1.add(statusBean2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jButton1.setText("Test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.add(jButton1);

        chkValidating.setText("Validating");
        chkValidating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkValidatingActionPerformed(evt);
            }
        });

        jPanel2.add(chkValidating);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void chkValidatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkValidatingActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_chkValidatingActionPerformed

    Vector succeededItems = null;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        statusBean1.clearStatus();
        statusBean2.clearStatus();
        
        // get the source file from the specified path
        String path = selectFileBean1.getPath();
        String contents = FileUtils.fromFile(path);
        statusBean1.printlnStatus(contents);
        
        //statusBean2.printlnStatus(checkValidation(contents));
        
        // PARSE
        readMmlString(contents);
        
        // ROOT OBJECT
        MMLObject obj = (MMLObject)dr.getMMLBuilder().getMmlTree().firstElement();
        if (obj == null) {
            statusBean2.printlnStatus("*** COULDN'T GET OBJECT");
            return;
        }

        
        // RENDER
        String mmlString = toStringMML(obj, true);
        statusBean2.printlnStatus(mmlString);
        FileUtils.toFile("c:/MathMMLV3/testout.xml", mmlString);
        
        // ANALYZE
        statusBean2.printlnStatus("num of extRefInContent: " + dr.getMMLBuilder().extRefInContent.size());
        
        //======================================================================
        // Mml Processing Instructions <?MmlResult ... ?>, <?MmlItemResult ... ?>
        Vector v = dr.getMMLBuilder().getMmlInstruction();
        if (succeededItems != null) {
            succeededItems.removeAllElements();
        } else {
            succeededItems = new Vector();
        }
        
        if (v != null && v.size() > 0) {
            for (int k = 0; k < v.size(); ++k) {
                String key = (String)v.elementAt(k);
                parse_Instruction(key, k);
            }
        }
        
        // mmlInstructionTable has ModuleItems which has MmlItemResult
        statusBean2.printlnStatus("num of resultItems: " + dr.getMMLBuilder().getMmlInstructionTable().size());
        // succeededItems has ModuleItems whose MmlItemResult's status is 'success'.
        statusBean2.printlnStatus("num of succeededItems: " + succeededItems.size());
        for (int k = 0; k < succeededItems.size(); ++k) {
            obj = (MMLObject)succeededItems.elementAt(k);
            if (obj != null) {
                statusBean2.printlnStatus(obj.getQName());
                // RENDER
                statusBean2.printlnStatus(toStringMML(obj));
            }
        }
        //======================================================================
    }//GEN-LAST:event_jButton1ActionPerformed

    public void parse_Instruction(String s, int index) {
        // it is assumed that the string s has the form of "command<>data" like
        // "mmlResult<>status=\"success\"...."
        // This is set by processingInstruction(String target, String data) in MMLDirector.
        
        statusBean2.printlnStatus("parse_Instruction: " + s + "_____index: " + index);
        
        int i = s.indexOf("<>");
        if (i < 0) return;
        
        String command = s.substring(0, i);
        String data = s.substring(i + 2, s.length());
        
        if (command.equals("mmlResult")) {
            statusBean2.printlnStatus("Parsing <?" + command);
            parse_mmlResult(data);
        } else if (command.equals("mmlItemResult")) {
            statusBean2.printlnStatus("Parsing <?" + command);
            parse_mmlItemResult(data, index);// to get parent MmlModuleItem, the index is passed too.
        }
    }
    
    public boolean parse_mmlResult(String data) {
        boolean resultSucceeded = false;
        
        // replace single quote with double quote
        data = data.replaceAll("\"", "'");
        data = data.replaceAll(" ", "");
        data = data.replaceAll("\r", "");
        data = data.replaceAll("\n", "");
        //System.out.println(data);
        
        // status
        int n1 = data.indexOf("status");
        if (n1 >= 0) {
            // status='success' or 'failed'
            String s = data.substring(n1 + 6 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            statusBean2.printlnStatus("status: " + s);
            //================================================
            if (s.equals("success")) {
                resultSucceeded = true;
                statusBean2.printlnStatus("*** mmlResult SUCCEEDED:)");
            } else {
                resultSucceeded = false;
                statusBean2.printlnStatus("*** mmlResult FAILED:(");
            }
            //================================================
        }
        
        // continue
        int n2 = data.indexOf("continue");
        if (n2 >= 0) {
            String s = data.substring(n2 + 8 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            // true or false
            statusBean2.printlnStatus("continue: " + s);
        }
        
        // partNo
        int n3 = data.indexOf("partNo");
        if (n3 >= 0) {
            String s = data.substring(n3 + 6 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            // 0, 1, 2, ...
            statusBean2.printlnStatus("partNo: " + s);
        }
        
        // reqId
        int n4 = data.indexOf("reqId");
        if (n4 >= 0) {
            String s = data.substring(n4 + 5 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            statusBean2.printlnStatus("reqId: " + s);
        } else {
            //----------------------------------------------------------------
            // because some program is likely to mistype reqId to reqid, 
            // we should be patient and generous for that:-)
            n4 = -1;
            n4 = data.indexOf("reqid");
            if (n4 >= 0) {
                String s = data.substring(n4 + 5 + 1 + 1, data.length());
                s = s.substring(0, s.indexOf("'"));
                statusBean2.printlnStatus("reqId was mistyped as reqid: " + s);
            }
            //----------------------------------------------------------------
        }
        
        // errorReason
        int n5 = data.indexOf("errorReason");
        if (n5 >= 0) {
            String s = data.substring(n5 + 11 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            // SYSTEMERROR, 
            // HEADERINVALID, 
            // NOTSUPPORTED, 
            // REQUESTDENIED
            statusBean2.printlnStatus("errorReason: " + s);
        }
        
        return resultSucceeded;
    }
    
    public void parse_mmlItemResult(String data, int index) {
        //==========================================================
        // GET PARENT OBJECT ANYWAY:-)
        Vector ht = dr.getMMLBuilder().getMmlInstructionTable();
        MMLObject obj = null;
        if (ht != null && ht.size() > 0) {
            obj = (MMLObject)ht.elementAt(index);
        }
        //==========================================================
        
        // replace single quote with double quote
        data = data.replaceAll("\"", "'");
        data = data.replaceAll(" ", "");
        data = data.replaceAll("\r", "");
        data = data.replaceAll("\n", "");
        //System.out.println(data);
        
        // status
        int n1 = data.indexOf("status");
        if (n1 >= 0) {
            // status='success' or 'failed'
            String s = data.substring(n1 + 6 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            statusBean2.printlnStatus("status: " + s);
            
            if (s.equals("success")){
                succeededItems.addElement(obj);
            }
        }
        
        // reqId
        int n4 = data.indexOf("reqId");
        if (n4 >= 0) {
            String s = data.substring(n4 + 5 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            statusBean2.printlnStatus("reqId: " + s);
        } else {
            //----------------------------------------------------------------
            // because some program is likely to mistype reqId to reqid, 
            // we should be patient and generous for that:-)
            n4 = -1;
            n4 = data.indexOf("reqid");
            if (n4 >= 0) {
                String s = data.substring(n4 + 5 + 1 + 1, data.length());
                s = s.substring(0, s.indexOf("'"));
                statusBean2.printlnStatus("reqId was mistyped as reqid: " + s);
            }
            //----------------------------------------------------------------
        }
        
        // errorReason
        int n5 = data.indexOf("errorReason");
        if (n5 >= 0) {
            String s = data.substring(n5 + 11 + 1 + 1, data.length());
            s = s.substring(0, s.indexOf("'"));
            // SYSTEMERROR, 
            // HEADERINVALID,
            // NOTHINGDATA, 
            // ACCESSDENIED, 
            // NOTSUPPORTED
            statusBean2.printlnStatus("errorReason: " + s);
        }
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new MMLV3ParserRendererTester().show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jButton1;
    private jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.StatusBean statusBean2;
    private javax.swing.JPanel jPanel2;
    private jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.SelectFileBean selectFileBean1;
    private jp.ac.kumamoto_u.kuh.fc.jsato.swing_beans.StatusBean statusBean1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox chkValidating;
    // End of variables declaration//GEN-END:variables

    public void readMmlString(String dataString) {
        statusBean1.printlnStatus("--- PARSING STRING ---");        
        try {
            // create parser
            SAXParserFactory saxFactory = SAXParserFactory.newInstance();
            // we need to detect namespaces by SAX2.
            // this setting should be called explicitely for jdk1.4 or later
            saxFactory.setNamespaceAware(true);
            
            //----
            saxFactory.setValidating(chkValidating.isSelected());////////////////////
            //----
            
            SAXParser parser = saxFactory.newSAXParser();
            XMLReader reader = parser.getXMLReader();
            if (reader == null) {
                System.out.println("XMLReader is null.");
                return;
            }
            
            //======================================
            // create MMLDirector
            if ( dr != null ) {
                dr.releaseDirector();
                dr = null;
            }
            dr = new MMLDirector(statusBean1);
            //=======================================
            
            reader.setContentHandler(dr);
            reader.setErrorHandler(new MMLErrorHandler(statusBean2));
            
            // parse xml
            BufferedReader br = new BufferedReader(new StringReader(dataString));
            if (br == null) {
                System.out.println("BufferedReader is null.");
                return;
            }
            reader.parse(new InputSource(br));
            
            // create new file
            statusBean1.printlnStatus("--- Parsing done... ---\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String checkValidation(String dataString) {
        String resultString = "";
        try {
            StringWriter sw = null;
            BufferedWriter bw = null;
            PrintWriter pw = null;
            sw = new StringWriter();
            bw = new BufferedWriter(sw);
            pw = new PrintWriter(bw);

                // create parser
                SAXParserFactory saxFactory = SAXParserFactory.newInstance();
                // we need to detect namespaces by SAX2.
                // this setting should be called explicitely for jdk1.4 or later
                saxFactory.setNamespaceAware(true);

                //----
                saxFactory.setValidating(true);////////////////////
                //----

                SAXParser parser = saxFactory.newSAXParser();
                XMLReader reader = parser.getXMLReader();
                if (reader == null) {
                    System.out.println("XMLReader is null.");
                    return "";
                }

                if ( dr != null ) {
                    dr.releaseDirector();
                    dr = null;
                }
                dr = new MMLDirector();

                reader.setContentHandler(dr);
                MMLErrorHandler eh = new MMLErrorHandler();
                eh.setPrintWriter(pw);
                reader.setErrorHandler(eh);

                // parse xml
                BufferedReader br = new BufferedReader(new StringReader(dataString));
                if (br == null) {
                    System.out.println("BufferedReader is null.");
                    return "";
                }
                reader.parse(new InputSource(br));
            
            pw.flush();
            bw.flush();
            sw.flush();

            resultString = sw.toString();

            pw.close();
            bw.close();
            sw.close();
            bw = null;
            sw = null;

            return resultString;

        } catch (Exception e) {
            e.printStackTrace();
            return resultString;
        }        
    }
    
    public String toStringMML(MMLObject obj) {
        return toStringMML(obj, false);// <?xml is not written
    }
    
    public String toStringMML(MMLObject obj, boolean writeXMLInstruction) {
        if (obj == null) return "";
        
        String resultString = "";
        try {
            StringWriter sw = null;
            BufferedWriter bw = null;
            PrintWriter pw = null;
            sw = new StringWriter();
            bw = new BufferedWriter(sw);
            pw = new PrintWriter(bw);

            // create visitor
            MMLVisitor v = new MMLVisitor(pw, writeXMLInstruction);
            v.visitMMLObject(obj);

            pw.flush();
            bw.flush();
            sw.flush();

            resultString = sw.toString();

            pw.close();
            bw.close();
            sw.close();
            bw = null;
            sw = null;

            return resultString;

        } catch (Exception e) {
            e.printStackTrace();
            return resultString;
        }
    }
}
